from vkbottle.ext import Middleware
from vkbottle.user import User, Message
from vkbottle.api import API
from vkbottle import PhotoUploader
from rextester_py import rexec_aio
from urllib.request import urlopen
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import math, random, mc, json, sqlite3

db = sqlite3.connect('database.db')
sql = db.cursor()

sql.execute("""CREATE TABLE IF NOT EXISTS users(
	id BIGINT,
	name TEXT,
	balance BIGINT,
	marry_date TEXT,
	marry_id BIGINT
)""")
db.commit()

user = User("b516fcaf9c73ae2b6fdb11558f29a10167a3dd8a8178f1cafafa563a503889d2e03510b836d41d4ec5c6c", mobile = True)
api = API("b516fcaf9c73ae2b6fdb11558f29a10167a3dd8a8178f1cafafa563a503889d2e03510b836d41d4ec5c6c")
photo_uploader = PhotoUploader(user.api, generate_attachment_strings=True) 

def banned_words(text: str):
	text = text.replace("vto.—Ä–µ","").replace("https://vto.—Ä–µ","").replace(".com","").replace(".ru","").replace(".lol","").replace("sex","").replace("porno","")
	return text

@user.middleware.middleware_handler()
class Registration(Middleware):
	async def pre(self, ans: Message):
		if ans.from_user and len(q.execute(f"SELECT * FROM users WHERE id = {ans.from_id}").fetchall()) == 0:
			await ans(f"—Ç—ã –∑–∞—Ä–µ–≥–∞–ª—Å—è —É–µ–±–æ–∫")

@user.on.message_handler(text = "–≤—ã–±–µ—Ä–∏ <da> –∏–ª–∏ <net>", lower = True)
async def wrapper(ans: Message, da, net: str):
    penis = await user.api.users.get(user_ids=ans.from_id, fields='is_closed')
    return f"üåø [id{ans.from_id}|{penis[0].first_name}], –Ø –≤—ã–±—Ä–∞–ª: {random.choice(banned_words(str(da)),banned_words(str(net)))}"
    
@user.on.message_handler(text="–Ω–∞–≥—Ä–∞–¥–∏—Ç—å –º–µ–¥–∞–ª—å—é <da>", lower = True)
async def wrapper(ans: Message, da: str):
    if ans.from_id == 579018447:
        return f"üåø [id{ans.from_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å], –Ω–∞–≥—Ä–∞–¥–∏–ª [id{ans.reply_message.from_id}|–≤–∞—Å] –º–µ–¥–∞–ª—å—é {da}"
    else:
        return f"üåø –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!"

@user.on.message_handler(text="?–±—Ä–∞–∫",lower = True)
async def wrapper(ans: Message):
    return f"ü§ó [id{ans.from_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å], –ø–æ—è–≤–∏–ª–∏—Å—å –º–æ–ª–æ–¥–æ –∂—ë–Ω—ã [id{ans.reply_message.from_id}|–≤–∞–º] =)"

@user.on.message_handler(text="?–±—Ä–∞–∫–∏",lower = True)
async def wrapper(ans: Message):
    f = open("text.txt", "r")
    b = open("text2.txt", "r")
    return f"üíû –ë—Ä–∞–∫–∏ –±–µ—Å–µ–¥—ã\n\n1.[id{f.read()}|–õ—é–±–æ–≤—å] üíö [id{b.read()}|–ú–æ—Ä–∫–æ–≤—å]"

@user.on.message_handler(text="–û–±–Ω—è—Ç—å",lower = True)
async def wrapper(ans: Message):
    penis = await user.api.users.get(user_ids=ans.from_id, fields='is_closed')
    return f"ü§ó [id{ans.from_id}|{penis[0].first_name}] –æ–±–Ω—è–ª –∫–æ–≥–æ —Ç–æ =)"

@user.on.message_handler(text="/me <da>", lower = True)
async def wrapper(ans: Message, da: str):
    return f"[id{ans.from_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å], {da}"

@user.on.message_handler(text = "–∫—Ç–æ <da>", lower = True)
async def wrapper(ans: Message, da: str):
	penis = await user.api.users.get(user_ids=ans.from_id, fields='is_closed')
	da = banned_words(da)
	users = await user.api.messages.get_conversation_members(peer_id=ans.peer_id)
	return f'üåÄ [id{ans.from_id}|{penis[0].first_name}], —è –¥—É–º–∞—é —á—Ç–æ {da} @id{random.choice([member.id for member in users.profiles if member.id])} (–æ–Ω)!'

@user.on.message_handler(text="—Å—Ç–∏–∫–µ—Ä—ã", lower = True)
async def wrapper(ans: Message):
	penis = await user.api.users.get(user_ids=ans.from_id, fields='is_closed')
	if ans.reply_message:
		all_stickers = await api.request('gifts.getCatalog', {'user_id': ans.reply_message.from_id})
		stickers = [f"{i['sticker_pack']['title']}" for i in all_stickers[1]['items'] if 'disabled' in i]
		if len(stickers) > 0:
			return f"ü§ë [id{ans.from_id}|{penis[0].first_name}], —É –Ω–µ–≥–æ –µ—Å—Ç—å {len(stickers)} —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: \n\n{', '.join(stickers)}"
		else:
			return f"ü§ë [id{ans.from_id}|{penis[0].first_name}], —É –Ω–µ–≥–æ –Ω–µ—Ç—É —Å—Ç–∏–∫–µ—Ä–æ–≤!"
	else:
		all_stickers = await api.request('gifts.getCatalog', {'user_id': ans.from_id})
		stickers = [f"{i['sticker_pack']['title']}" for i in all_stickers[1]['items'] if 'disabled' in i]
		if len(stickers) > 0:
			return f"ü§ë [id{ans.from_id}|{penis[0].first_name}], —É –≤–∞—Å –µ—Å—Ç—å {len(stickers)} —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: \n\n{', '.join(stickers)}"
		else:
			return f"ü§ë [id{ans.from_id}|{penis[0].first_name}], —É –≤–∞—Å –Ω–µ—Ç—É —Å—Ç–∏–∫–µ—Ä–æ–≤!"
		

@user.on.message_handler(text=["–∫–æ—Ä–µ–Ω—å <da>","‚àö<da>"],lower = True)
async def wrapper(ans: Message, da: str):
    penis = await user.api.users.get(user_ids=ans.from_id, fields='is_closed')
    return f"üåø [id{ans.from_id}|{penis[0].first_name}], –æ—Ç–≤–µ—Ç: {math.sqrt(int(da))}"

@user.on.message_handler(text="send <da>", lower = True)
async def wrapper(ans: Message, da: str):
    brawl = ans.from_id
    await user.api.messages.send(user_id=brawl, random_id=0, message=f'{da}')
    return f"Message from {ans.from_id} send"

@user.on.message_handler(text = "–ø—Ä–∏–º–µ—Ä <da>", lower = True)
async def wrapper(ans: Message, da):
	penis = await user.api.users.get(user_ids = ans.from_id, fields='is_closed')
	list = [i for i in da if str(i) in ["1","2","3","4","5","6","7","8","9","0","+","-","/","*"]]
	if len(list) == len(da):
		return f"üåø [id{ans.from_id}|{penis[0].first_name}], –æ—Ç–≤–µ—Ç: {'{0:,}'.format(eval(da))}"""
	else:
		return f"üåø [id{ans.from_id}|{penis[0].first_name}], –Ø –º–æ–≥—É —Ä–µ—à–∏—Ç—å –ø—Ä–∏–º–µ—Ä —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä."

@user.on.message_handler(text="py <da>", lower = True) 
async def wrapper(ans: Message, da: str):
    c = da.replace("~", "    ")
    rex = await rexec_aio(f"python 3", "{c}", None) 
    penis = await user.api.users.get(user_ids=ans.from_id, fields='is_closed')
    return f"üåø [id{ans.from_id}|{penis[0].first_name}], –≤—ã–≤–æ–¥: {banned_words(rex.results)}"

@user.on.message_handler(text="shadow")
async def wrapper(ans: Message):
    await ans("—à–∞–¥–æ—Ñ", attachment="audio579018447_456239069")

@user.on.message_handler(text=['!–∑–∞—Ç–µ–º–Ω–∏', '!–ó–∞—Ç–µ–º–Ω–∏'], lower = True)
async def darked(ans: Message):

	await ans(f'üñº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞—á–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏..')

	if ans.reply_message: 
		img = ans.reply_message.attachments[0].photo.sizes[-1].url

	elif ans.fwd_messages:
		img = ans.fwd_messages[0].attachments[0].photo.sizes[-1].url

	else:
		img = ans.attachments[0].photo.sizes[-1].url


	source = Image.open(urlopen(img))
	result = Image.new('RGB', source.size)

	for x in range(source.size[0]):
		for y in range(source.size[1]):
			r, g, b = source.getpixel((x, y))

			red = min(255, max(0, int(r * 0.5)))
			green = min(255, max(0, int(g * 0.5)))
			blue = min(255, max(0, int(b * 0.5)))
			result.putpixel((x, y), (red, green, blue))

		fp = BytesIO()
		result.save(fp, 'PNG')
		setattr(fp, "name", "image.png")

		await ans('üòá –ì–æ—Ç–æ–≤–æ. –°–æ—Ö—Ä–∞–Ω—è–π!', attachment=await photo_uploader.upload(fp))

@user.on.message_handler(text="–º–æ—Ä–≥–µ–Ω", lower = True)
async def wrapper(ans: Message):
    await ana("–¢–≤–æ–π –º–æ—Ä–≥–µ–Ω)", attachment="audio542720500_67823365")

@user.on.message_handler(text="text <da>", lower = True)
async def darked(ans: Message, da):

	img = Image.new('RGB', (200,200), color=('#9ACEEB'))
	font_type = ImageFont.load_default()
	draw = ImageDraw.Draw(img)

	draw.multiline_text((100, 50), f"{da}", 56, font=font_type)
	img.save('photo1_watermarked.png')

	photo = await photo_uploader.upload_message_photo('photo1_watermarked.png')
	await ans('–î–µ—Ä–∂–∏—Ç–µ —Ñ–æ—Ç–æ:', attachment=photo)

@user.on.message_handler(text=".text <x> <y> <da>", lower = True)
async def darked(ans: Message, x, y, da):

	img = Image.new('RGB', (200,200), color=('#9ACEEB'))
	font_type = ImageFont.load_default()
	draw = ImageDraw.Draw(img)

	draw.multiline_text((int(x), int(y)), f"{da}", 56, font=font_type)
	img.save('photo1_watermarked.png')

	photo = await photo_uploader.upload_message_photo('photo1_watermarked.png')
	await ans('–î–µ—Ä–∂–∏—Ç–µ —Ñ–æ—Ç–æ:', attachment=photo)

@user.on.message_handler(text=".–•–µ–Ω—Ç–∞–π", lower = True)
async def wrapper(ans: Message):
	photo = await photo_uploader.upload_message_photo('1.jpg')
	await ans('ü•∫ –î–µ—Ä–∂–∏—Ç–µ —Ö–µ–Ω—Ç–∞–π:', attachment=photo)

@user.on.message_handler(text = "—Å–ø–∞–º <da>; <count>", lower = True) 
async def wrapper(ans: Message, da, count):
	if ans.from_id in [579018447,447409965]:
		if count.isdigit():
			return str(da)*int(count)
		else:
			return "–º–± –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º, –Ω–µ?"

@user.on.message_handler()
async def wrapper(ans: Message):
	data = json.load(open("words.json","r",encoding="utf-8"))
	procent = random.randint(1,25)
	if procent > 20:
		data["words"].append(ans.text)
		json.dump(data, open("words.json","w"),ensure_ascii=False)
		r1 = random.choice(data["words"])
		r2 = random.choice(data["words"])
		generator = mc.StringGenerator(samples = [r1,r2])
		result = generator.generate_string()
		await ans(f"{result}")

user.run_polling() 
