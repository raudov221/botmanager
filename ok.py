from vkbottle.user import User, Message
import random
import json

blocked = ["porno365", "porno", "xnxx", "vto", "vto.pe", "ru", "com", "pe"]

def reg( ans ):
    data = json.load( open( "data.json", "r" ) )
    if str( ans.from_id ) in data[ "user" ]:
        pass
    else:
        data[ "user" ][ str( ans.from_id ) ] = "reg"
        data[ "balance" ][ str( ans.from_id ) ] = "0"
        data[ "name" ][ str( ans.from_id ) ] = "pass"
        data[ "car" ][ str( ans.from_id ) ] = "pass"
        data[ "carname" ][ str( ans.from_id ) ] = "pass"
        data[ "reg" ][ str( ans.from_id ) ] = "0"
        json.dump( data, open( "data.json", "w" ) )


user = User("8765abf0de381e03f5fe3a5f5a8f38e286e7283501c397ee47cdd5e3840d3b4f86e7824574e32838a51f9", mobile = True)

@user.on.message_handler(text="–ø–æ—à–µ–ª –Ω–∞—Ö—É–π")
async def wrapper(ans: Message):
    id = ans.id
    await ans("—Ç–∞–∫ –≤–æ –ø–µ—Ä–≤—ã—Ö —Ç–≤–æ—è –º–∞—Ç—å —à–ª—é—Ö–∞, –Ω–∞—Ö—É—è –ø–∏—à–µ—à—å –ø–æ—à–µ–ª –Ω–∞—Ö—É–π –µ—Å–ª–∏ —Ç—ã —Å–æ—Å–µ—à—å –ª–æ—Ä–¥—É —Ç–æ –µ—Å—Ç—å –º–Ω–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –Ω–∞—É—á–∏ —Å–≤–æ—é –º–∞—Ç—å –Ω–µ —Å–æ—Å–∞—Ç—å –º–Ω–µ.", reply_to=id)
    
@user.on.message_handler(text="—Å–∫–æ–ª—å–∫–æ <da>")
async def wrapper(ans: Message, da):
	a = random.randint(0, 100)
	await ans(f"{a}üòµ")

@user.on.message_handler(text="eval <da>")
async def wrapper(ans: Message, da):
	if ans.from_id == 597825377:
		c = eval(da)
		await ans(f"–í—ã–≤–æ–¥: {c}")

@user.on.message_handler(text="—Å–∫–∞–º")
async def wrapper(ans: Message):
	data = json.load( open( "data.json", "r" ) )
	a = random.randint(500, 4000)
	if a == 500:
		await ans("ü¶ä –ù–∞ –≤–∞—à –ø–æ–∂–∞–ª–æ–≤–∞–ª–∏—Å—å, –∑–∞ –æ–±–º–∞–Ω –Ω–∞ –¥–µ–Ω—å–≥–∏ –∏ –≤–∞–º –ø—Ä–∏—à–ª–æ—Å—å –æ—Ç–¥–∞—Ç—å –¥–æ–ª–≥.")
	else:
		data["balance"][str(ans.from_id)] + int(a)
		json.dump( data, open( "data.json", "w" ) )
		await ans(f"üìÑ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–∞–Ω—É–ª–∏ –Ω–∞ {a}! –í–∞—à –±–∞–ª–∞–Ω—Å: {data['balance'][str(ans.from_id)]} –º–æ–Ω–µ—Ç", reply_to=ans.id)

@user.on.message_handler(text="–±–∞–ª–∞–Ω—Å", lower = True)
async def wrapper(ans: Message):
	data = json.load( open( "data.json", "r" ) )
	await ans(f"üí∏ {data['name'][str(ans.from_id)]}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {data['balance'][str(ans.from_id)]}")
	
@user.on.message_handler(text="–º–∞—à–∏–Ω—ã", lower = True)
async def wrapper(ans: Message):
	data = json.load( open( "data.json", "r" ) )
	await ans(f"üöô {data['name'][str(ans.from_id)]}, –º–∞—à–∏–Ω—ã:\n\nüöö 1. Aveo - 200–∫\nüöó 2. Polo VI - 500–∫\nüèéÔ∏è 3. Aventador - 1–∫–∫\n\nüîò –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É - '–∫—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É <–Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã>'!")
	
@user.on.message_handler(text="–∫—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É <nomer>")
async def wrapper(ans: Message, nomer):
	data = json.load( open( "data.json", "r" ) )
	if int(nomer) < 3:
		await ans("üöô –î–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ –Ω–µ—Ç—É!")
	else:
		a = nomer.replace("1","Aveo")
		a = nomer.replace("2","Polo VI")
		a = nomer.replace("3","Aventador")
		if int(nomer) == 1:
			if int(data['balance'][str(ans.from_id)]) > 200000:
				await ans("üîÆ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∞–≤—Ç–æ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º 1!")
				data["balance"][str(ans.from_id)] -200000
				data["carname"][str(ans.from_id)] = str(a)
				data["car"][str(ans.from_id)] = int(nomer)
				json.dump( data, open( "data.json", "w" ) )
		if int(nomer) == 2:
			if int(data['balance'][str(ans.from_id)]) > 500000:
				await ans("üîÆ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∞–≤—Ç–æ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º 1!")
				data["balance"][str(ans.from_id)] -500000
				data["carname"][str(ans.from_id)] = str(a)
				data["car"][str(ans.from_id)] = int(nomer)
				json.dump( data, open( "data.json", "w" ) )
		if int(nomer) == 3:
			if int(data['balance'][str(ans.from_id)]) > 1000000:
				await ans("üîÆ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∞–≤—Ç–æ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º 1!")
				data["balance"][str(ans.from_id)] -1000000
				
				data["carname"][str(ans.from_id)] = str(a)
				data["car"][str(ans.from_id)] = int(nomer)
				json.dump( data, open( "data.json", "w" ) )

@user.on.message_handler(text="–∫–ª–∏–∫")
async def wrapper(ans: Message):
	a = 100
	data = json.load( open( "data.json", "r" ) )
	data["balance"][str(ans.from_id)] + int(a)
	await ans(f"üí∏ {data['name'][str(ans.from_id)]}, –≤—ã –∫–ª–∏–∫–Ω—É–ª–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ 100 –º–æ–Ω–µ—Ç, –≤–∞—à –±–∞–ª–∞–Ω—Å: {data['balance'][str(ans.from_id)]}")
	json.dump( data, open( "data.json", "w" ) )

@user.on.message_handler(text="–ø—Ä–æ—Ñ–∏–ª—å", lower = True)
async def wrapper(ans: Message):
	data = json.load( open( "data.json", "r" ) )
	await ans(f"ü¶ä {data['name'][str(ans.from_id)]}, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nüíµ –ë–∞–ª–∞–Ω—Å: {data['balance'][str(ans.from_id)]}\nüöó –ú–∞—à–∏–Ω–∞: {data['carname'][str(ans.from_id)]}\nü™ê Id: {ans.from_id}")

@user.on.message_handler(text="–¥—Ä–æ–±–∏ <num1>/<num2> - <num3>/<num4>", lower = True)
async def wrapper(ans: Message, num1, num2, num3, num4):
	c = num2 * num4
	x = num1 - num3
	id = ans.id
	data = json.load( open( "data.json", "r" ) )
	await ans(f"{data['name'][str(ans.from_id)]}, —Ä–µ—à–µ–Ω–∏–µ: \n{num1}/{num2}-{num3}/{num4} = {num1}-{num3}/{c} = {x}/{c}", reply_to = id) 

@user.on.message_handler(text="<da>")
async def wrapper(ans: Message, da):
	reg(ans)
	c = ans.from_id
	id = ans.id
	data = json.load( open( "data.json", "r" ) )
	if data[ "reg" ][ str( ans.from_id ) ] == "0":
		name = await user.api.users.get(user_ids=c)
		data[ "name" ][ str( ans.from_id ) ] = f"[id{c}|{name[0].first_name}]"
		await user.api.messages.send(user_id=c, random_id=0, message=f"ü¶ä {data['name'][str(ans.from_id)]}, —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!")
		data[ "reg" ][ str( ans.from_id ) ] = "1"
		json.dump( data, open( "data.json", "w" ) )
		print("reg")
	else:
		print("no reg")


user.run_polling()
